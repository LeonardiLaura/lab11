% search2 (Elem , List )
% looks for two consecutive occurrences of Elem

search2(E,[E,E|_]).
search2(E,[H|T]):- search2(E,T).


% search_two (Elem , List )
% looks for two occurrences of Elem with any element in between !

search_two(E,[E,_,E|T]).
search_two(E,[H|T]):- search_two(E,T).

% size (List , Size )
% Size will contain the number of elements in List is it fully relational?

size (L , N) :- var (L) , !, generate (L , N).
size (L , N) :- length (L , N ).

generate ([] , 0) :- !.
generate ([ _|T] , N ) :- N2 is N -1 , generate (T , N2 ) .

length ([] , 0) .
length ([ _|T] , N ) :- length (T , N2 ) , N is N2 + 1.


% sum(List , Sum )
%is it fully relational?
% NO

sum(L,N):- var(L), !, gen(L,N).
sum(L,N):- sum2(L,N).

gen([],0):- !.
gen([H|T],S):- N is S-1, gen(T,N).

sum2([],0).
sum2([H|T],N):- sum2(T,S), N is H+S.



% max(List ,Max , Min )
% Max is the biggest element in List
% Min is the smallest element in List
% Suppose the list has at least one element


max([],Max,Min,Max,Min).
max([H|T],Max,Min):- max(T,H,H,Max,Min).
max([H|T],Maxt,Mint,Max,Min):- H<Mint, max(T,Maxt,H, Max,Min).
max([H|T],Maxt,Mint,Max,Min):- H>Maxt, max(T,H,Mint,Max,Min).
max([H|T],Maxt,Mint,Max,Min):- H=<Maxt, H>=Mint, max(T,Maxt,Mint,Max,Min).

% funge ma non con lista x, suppongo che abbia almeno un elemento per la consegna e quindi ignoro il caso, altrimenti si può fare con cut

% sublist (List1 , List2 )
% List1 should contain elements all also in List2
% example : sublist ([1 ,2] ,[5 ,3 ,2 ,1]).

find(X,[X|_]).
find(X,[H|T]):- find(X,T).

sublist([],[E|_],L).
sublist([H|T1],[H|T2],L):- sublist(T1,L,L).
sublist([H1|T1],[H2|T2],L):- H1=\=H2, sublist(T1,T2,L).
sublist(L1,L2):- sublist(L1,L2,L2).

% non rel e no doppi

% dropAny (? Elem ,? List ,? OutList )

dropAny(X , [X | T], T).
dropAny(X , [H | Xs ], [H | L ]) :- dropAny (X , Xs , L ).

% dropFirst: drops only the first occurrence (showing no alternative results)

dropFirst(X , [X | T], T):-!.
dropFirst(X , [H | Xs ], [H | L ]) :- dropFirst (X , Xs , L ).

% dropLast: drops only the last occurrence (showing no alternative results)

dropLast(X , [H | Xs ], [H | L ]) :- dropLast(X , Xs , L ), !.
dropLast(X , [X | T ],  T ). 

% dropAll: drop all occurrences, returning a single list as a result

dropAll(X,[],[]).
dropAll(X , [X | T], T2):- dropAll(X , T , T2 ).
dropAll(X , [H | Xs ], [H | L ]) :- X\=H, dropAll(X , Xs , L ).


%dropAll(X , [H | Xs ],  L) :- H=X,!,dropAll2(X , [H | Xs ], L ).
%dropAll(X , [H | Xs ], [H | L ]) :- dropAll(X , Xs , L ).
%dropAll2(X , [X | T ],  T2 ):- dropAll(X , T,  T2 ). 
%dropAll(X,[],[]).

% fromList (+ List ,- Graph )

fromList ([ _ ] ,[]) .
fromList ([ H1 , H2 |T ] ,[ e(H1 , H2 ) |L ]) :- fromList ([ H2 |T ],L).


% fromCircList (+ List ,- Graph )
% which implementation ?

fromCircList([X],[e(X,X)]).
fromCircList ([ H1 , H2 |T ] ,[ e(H1 , H2 ) |L ]) :- fromCircList ([ H2 |T ],L, H1).
fromCircList ([ H1 , H2 |T ] ,[ e(H1 , H2 ) |L ], St) :- fromCircList ([ H2 |T ],L, St).
fromCircList([X],[e(X,St)],St).

% outDegree (+ Graph , +Node , -Deg )
% Deg is the number of edges leading into Node

outDegree([e(N, H2)| L], N, C):- outDegree(L, N, D), C is D+1.
outDegree([e(H1, H2)| L], N, C):- H1=\=N, outDegree(L, N, C).
outDegree([],N,0).

% dropNode (+ Graph , +Node , -OutGraph )
% drop all edges starting and leaving from a Node
% use dropAll defined in 1.1??

dropNode(G, N, Og ):- dropAll(e(N, _),G, G2 ), dropAll(e(_ ,N ), G2, Og ).



% reaching (+ Graph , +Node , -List )
% all the nodes that can be reached in 1 step from Node
% possibly use findall , looking for e(Node ,_) combined
% with member (? Elem ,? List )

reaching(G,N,L):- findall(E, member(e(N,E),G),L).

% nodes (+ Graph , -Nodes )
% craate a list of all nodes (no duplicates ) in the graph ( inverse of fromList )
%Implement it
%nodes([e(1,2),e(2,3),e(3,4)],L). -> L/[1,2,3,4]
%nodes([e(1,2),e(1,3)],L). -> L/[1,2,3].

node([],L,L).
nodes(G,L):- node(G,L,[]).
node([e(H1,H2)|G],O,L):- member(H1,L),! , node(G,H2,O,L).
node([e(H1,H2)|G],O,L):- member(H2,L),! , node(G,H1,O,L).
node([e(H1,H2)|G],O,L):- node(G,O,[H1,H2|L]).
node(G,H,O,L):- member(H,L), node(G,O,L).
node(G,H,O,L):- node(G,O,[H|L]).

% anypath (+ Graph , +Node1 , +Node2 , -ListPath )
% a path from Node1 to Node2
% if there are many path , they are showed 1-by -1
%anypath([e(1,2),e(1,3),e(2,3)],1,3,L).
% L/[e(1,2),e(2,3)]
% L/[e(1,3)]

anypath(G,N1,N2,[e(N1,E)|L]):- member(e(N1,E),G), anypath(G,E,N2,L).
anypath(G,N2,N2,[]).

% allreaching (+ Graph , +Node , -List )
% all the nodes that can be reached from Node
% Suppose the graph is NOT circular !
% Use findall and anyPath !
%allreaching([e(1,2),e(2,3),e(3,5)],1,[2,3,5]).


allreaching(G,N1,L):- allreaching(G,N1,N1,L).
allreaching(G,N1,S,L):- member(e(N1,X),G), !, allreaching(G,X,S,L).
allreaching(G,N1,S,L):- anypath(G,S,N1,L1), findall(X,member(e(_,X),L1),L).



interval (A , B , A ).
interval (A , B , X ):- A2 is A +1 , A2 < B , interval ( A2 , B , X).
neighbour (A , B , A , B2 ):- B2 is B +1.
neighbour (A , B , A , B2 ):- B2 is B -1.
neighbour (A , B , A2 , B):- A2 is A +1.
neighbour (A , B , A2 , B):- A2 is A -1.

gridlink (N , M , link (X , Y , X2 , Y2 )):-interval (0 , N , X ) , interval (0 , M , Y ) , neighbour (X , Y , X2 , Y2 ) , X2 >= 0, Y2 >= 0, X2 < N , Y2 < M.

graph(N,M,e(G1,G2)):- gridlink(N,M,link(X , Y , X2 , Y2 )), G1 is (X*M)+Y ,G2 is (X2*M)+Y2.

gridgraph(N,M,L):- findall(E,graph(N,M,E),L).

%Part 4: Generating Connect3 (“forza 3”)

%next(@Table,@Player,-Result,-NewTable)
%[[n,n,n],[n,o,x],[o,x,o]] for Table
%assumptions: grid 3*3; T can be illegal; T can be complete,
%T can already have a winner, result draw if both player wins in T2 or if T2 is full
%result nothing if nobody win and T2 is not complete 

next(T, P, R, T2):- 
    legal_table(T), %check if T is a legal table
    select(n, T, P, T2), %generate all possible table
    legal_table(T2), %filter only next legal table
    check_winner(T2, R).

%variant of select that works with sublist
select(X, [X | T], Y, [Y | T]).
select(X, [[H | L] | T], Y, [[H2 | L2] | T]) :- select(X, [H | L], Y, [H2 | L2]).
select(X, [H | T], Y, [H | T2]) :- select(X, T, Y, T2).

%check if the Table is legal (thinked to work for a n*m grid
legal_table([_]).
legal_table([L1, L2 | T]) :- legal_rows([L1, L2]), legal_table([L2 | T]).

%check for pair of rows
legal_rows([[], []]).
legal_rows([[n | L1], [_ | L2]]) :- legal_rows([L1, L2]).
legal_rows([[S | L1], [S2 | L2]]) :- player(S), player(S2), legal_rows([L1, L2]). 
 
player(x).
player(o).

check_winner(T, even) :- won(T, x), won(T, o), !. %both winners
check_winner(T, win(P)) :- player(P), won(T, P), !. %only one winner
check_winner([[C1, C2, C3] | _], even) :- player(C1), player(C2), player(C3), !. %full table, nobody wins
check_winner(T, nothing). %not full table, nobody wins

won([[P, P, P], _, _], P) :- !. % Top row
won([_, [P, P, P], _], P) :- !. % Middle row
won([_, _, [P, P, P]], P) :- !. % Bottom row
won([[P, _, _], [P, _, _], [P, _, _]], P) :- !.   % Left column
won([[_, P, _], [_, P, _], [_, P, _]], P) :- !.   % Middle column
won([[_, _, P], [_, _, P], [_, _, P]], P) :- !.   % Right column
won([[P, _, _], [_, P, _], [_, _, P]], P) :- !.   % Top-left to bottom-right diagonal
won([[_, _, P], [_, P, _], [P, _, _]], P) :- !.   % Top-right to bottom-left diagonal

%game(@Table,@Player,-Result,-TableList)

game(T, P, R, [T, T2]) :- next(T, P, R, T2), R \= nothing, !.
game(T, x, R, [T | L]) :- next(T, x, nothing, T2), game(T2, o, R, L).
game(T, o, R, [T | L]) :- next(T, o, nothing, T2), game(T2, x, R, L).